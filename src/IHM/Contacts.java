/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IHM;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Presence;
import sources.JabberSmackAPI;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author valentin
 */
public class Contacts extends javax.swing.JFrame {

    private String username;
    private String password;
    private String host;
    private int port;
    private Icon En_Ligne = new ImageIcon(getClass().getResource("/images/Status-Online-32.png"));
    private Icon Absent = new ImageIcon(getClass().getResource("/images/Status-Away-32.png"));
    private Icon Hors_Ligne = new ImageIcon(getClass().getResource("/images/Status-Offline-32.png"));
    private Icon Occuppe = new ImageIcon(getClass().getResource("/images/Status-Busy-32.png"));
    private ArrayList tab;
    private JabberSmackAPI api;
    private HashMap<String, String> discussions = new HashMap<String, String>();
    private String contact;
    private Session session;
    
    public void ChangeLabel(String nom, String etat){
        for (int i = 0; i< tab.size(); i++){
            if (tab.get(i).equals(nom)){
                tab.remove(i);
                tab.add(i, new JLabel(nom, En_Ligne, 0));
                listeContacts.setListData(tab.toArray());
            }
        }
    }
    /**
     * Creates new form Contacts
     */
    public Contacts(String username, String password, String host, int port, Session session) throws XMPPException, IOException, InterruptedException {
        
        initComponents();
        
        this.username = username;
        this.password = password;
        this.host = host;
        this.port = port;
        this.session = session;
        api = new JabberSmackAPI(username, password, host, port);
        api.main(null);
        api.setContact(this);
        
        if (session.equals(Session.Gmail)){
            itemEnvoiFichier.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        scrollPaneContacts = new javax.swing.JScrollPane();
        listeContacts = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        panelEnvoiMessage = new javax.swing.JPanel();
        textFieldMessage = new javax.swing.JTextField();
        buttonEnvoiMessage = new javax.swing.JButton();
        scrollPaneMessages = new javax.swing.JScrollPane();
        textPaneMessages = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuCompte = new javax.swing.JMenu();
        itemHorsLigne = new javax.swing.JMenuItem();
        itemEnLigne = new javax.swing.JMenuItem();
        itemOccupe = new javax.swing.JMenuItem();
        itemAilleur = new javax.swing.JMenuItem();
        menuContacts = new javax.swing.JMenu();
        itemAjoutContact = new javax.swing.JMenuItem();
        menuItemSupprimerContact = new javax.swing.JMenuItem();
        menuConversation = new javax.swing.JMenu();
        itemEnvoiFichier = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conversations");
        setMinimumSize(new java.awt.Dimension(580, 500));
        setPreferredSize(new java.awt.Dimension(259, 500));

        jPanel1.setMaximumSize(new java.awt.Dimension(200, 200));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 200));
        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        scrollPaneContacts.setMaximumSize(new java.awt.Dimension(200, 200));
        scrollPaneContacts.setMinimumSize(new java.awt.Dimension(200, 200));

        listeContacts.setBackground(java.awt.SystemColor.window);
        listeContacts.setForeground(java.awt.SystemColor.window);
        listeContacts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listeContacts.setToolTipText("");
        listeContacts.setMaximumSize(new java.awt.Dimension(200, 200));
        listeContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listeContactsMouseClicked(evt);
            }
        });
        scrollPaneContacts.setViewportView(listeContacts);

        jPanel1.add(scrollPaneContacts, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        panelEnvoiMessage.setLayout(new javax.swing.BoxLayout(panelEnvoiMessage, javax.swing.BoxLayout.LINE_AXIS));

        textFieldMessage.setText("Message");
        textFieldMessage.setMinimumSize(new java.awt.Dimension(200, 19));
        textFieldMessage.setPreferredSize(new java.awt.Dimension(800, 25));
        textFieldMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldMessageActionPerformed(evt);
            }
        });
        textFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldMessageKeyPressed(evt);
            }
        });
        panelEnvoiMessage.add(textFieldMessage);

        buttonEnvoiMessage.setText("Envoyer");
        buttonEnvoiMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnvoiMessageActionPerformed(evt);
            }
        });
        panelEnvoiMessage.add(buttonEnvoiMessage);

        jPanel4.add(panelEnvoiMessage, java.awt.BorderLayout.PAGE_END);

        textPaneMessages.setEditable(false);
        scrollPaneMessages.setViewportView(textPaneMessages);

        jPanel4.add(scrollPaneMessages, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        menuCompte.setText("Compte");

        itemHorsLigne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Status-Offline-32.png"))); // NOI18N
        itemHorsLigne.setText("Hors ligne");
        itemHorsLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHorsLigneActionPerformed(evt);
            }
        });
        menuCompte.add(itemHorsLigne);

        itemEnLigne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Status-Online-32.png"))); // NOI18N
        itemEnLigne.setText("En ligne");
        itemEnLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEnLigneActionPerformed(evt);
            }
        });
        menuCompte.add(itemEnLigne);

        itemOccupe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Status-Busy-32.png"))); // NOI18N
        itemOccupe.setText("Occup√©");
        itemOccupe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOccupeActionPerformed(evt);
            }
        });
        menuCompte.add(itemOccupe);

        itemAilleur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Status-Away-32.png"))); // NOI18N
        itemAilleur.setText("Ailleur");
        itemAilleur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAilleurActionPerformed(evt);
            }
        });
        menuCompte.add(itemAilleur);

        jMenuBar1.add(menuCompte);

        menuContacts.setText("Contacts");

        itemAjoutContact.setText("Ajouter");
        itemAjoutContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAjoutContactActionPerformed(evt);
            }
        });
        menuContacts.add(itemAjoutContact);

        menuItemSupprimerContact.setText("Supprimer");
        menuItemSupprimerContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSupprimerContactActionPerformed(evt);
            }
        });
        menuContacts.add(menuItemSupprimerContact);

        jMenuBar1.add(menuContacts);

        menuConversation.setText("Conversation");

        itemEnvoiFichier.setText("Envoyer fichier");
        itemEnvoiFichier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEnvoiFichierActionPerformed(evt);
            }
        });
        menuConversation.add(itemEnvoiFichier);

        jMenuBar1.add(menuConversation);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemHorsLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHorsLigneActionPerformed
        api.connection.sendPacket(new Presence(Presence.Type.unavailable));
    }//GEN-LAST:event_itemHorsLigneActionPerformed

    private void itemEnLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEnLigneActionPerformed
        api.connection.sendPacket(new Presence(Presence.Type.available));
    }//GEN-LAST:event_itemEnLigneActionPerformed

    
    private void listeContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listeContactsMouseClicked
        JPanel pan = (JPanel) listeContacts.getSelectedValue();
        JLabel lab = (JLabel) pan.getComponent(0);
        
        if (!discussions.containsKey(lab.getText())){
        String messages = "";
        discussions.put(lab.getText(), messages);
        }
        
        this.contact = lab.getText();
        textPaneMessages.setText(discussions.get(contact));
        this.setTitle("Discussion avec : " + lab.getText());
    }//GEN-LAST:event_listeContactsMouseClicked

    private void itemOccupeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOccupeActionPerformed
        Presence p = new Presence(Presence.Type.available);
        p.setMode(Presence.Mode.dnd);
        api.connection.sendPacket(p);
    }//GEN-LAST:event_itemOccupeActionPerformed

    private void itemAilleurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAilleurActionPerformed
                Presence p = new Presence(Presence.Type.available);
        p.setMode(Presence.Mode.away);
        api.connection.sendPacket(p);
    }//GEN-LAST:event_itemAilleurActionPerformed

    private void buttonEnvoiMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnvoiMessageActionPerformed
             Chat chat = api.connection.getChatManager().createChat(contact, api);
        try {
            chat.sendMessage(textFieldMessage.getText());
            String messages = discussions.get(contact);
            messages = messages + "\n" + "moi : " + textFieldMessage.getText();
            discussions.replace(contact, messages);
            textPaneMessages.setText(messages);
            textFieldMessage.setText("");
        } catch (XMPPException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonEnvoiMessageActionPerformed

    private void itemAjoutContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAjoutContactActionPerformed
        FenetreAjoutContact ajout = new FenetreAjoutContact(api);
        ajout.setVisible(true);
    }//GEN-LAST:event_itemAjoutContactActionPerformed

    private void itemEnvoiFichierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEnvoiFichierActionPerformed
        String contact2 = api.roster.getPresence(contact).getFrom();
        
        EnvoiFichier envoi = new EnvoiFichier(api, contact2);
        envoi.setVisible(true);
    }//GEN-LAST:event_itemEnvoiFichierActionPerformed

    private void menuItemSupprimerContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSupprimerContactActionPerformed
        FenetreSuppContact fen;
        try {
            fen = new FenetreSuppContact(api);
            fen.setVisible(true);
        } catch (InterruptedException ex) {
            Logger.getLogger(Contacts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemSupprimerContactActionPerformed

    private void textFieldMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldMessageKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldMessageKeyPressed

    private void textFieldMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldMessageActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEnvoiMessage;
    private javax.swing.JMenuItem itemAilleur;
    private javax.swing.JMenuItem itemAjoutContact;
    private javax.swing.JMenuItem itemEnLigne;
    private javax.swing.JMenuItem itemEnvoiFichier;
    private javax.swing.JMenuItem itemHorsLigne;
    private javax.swing.JMenuItem itemOccupe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JList listeContacts;
    private javax.swing.JMenu menuCompte;
    private javax.swing.JMenu menuContacts;
    private javax.swing.JMenu menuConversation;
    private javax.swing.JMenuItem menuItemSupprimerContact;
    private javax.swing.JPanel panelEnvoiMessage;
    private javax.swing.JScrollPane scrollPaneContacts;
    private javax.swing.JScrollPane scrollPaneMessages;
    private javax.swing.JTextField textFieldMessage;
    private javax.swing.JTextPane textPaneMessages;
    // End of variables declaration//GEN-END:variables

    public void majPresence() throws InterruptedException {
        HashMap<String, String> liste = api.getBuddyList();
        listeContacts.setCellRenderer(new ImageListCellRenderer() {});
        tab =new ArrayList();
        for (String mapKey : liste.keySet()) {
            if (liste.get(mapKey).equals("available: away")){
                JLabel Label= new JLabel(mapKey.toString(), Absent, 0);
                JPanel Panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                Panel.add(Label);
                tab.add(Panel);
            }
            if (liste.get(mapKey).equals("unavailable") || liste.get(mapKey).equals("null")){
                JLabel Label= new JLabel(mapKey.toString(), Hors_Ligne, 0);
                JPanel Panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                Panel.add(Label);
                tab.add(Panel);
            }
            if (liste.get(mapKey).equals("available: dnd ()")){
                JLabel Label= new JLabel(mapKey.toString(), Occuppe, 0);
                JPanel Panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                Panel.add(Label);
                tab.add(Panel);
            }
            if (liste.get(mapKey).equals("available")){
                JLabel Label= new JLabel(mapKey.toString(), En_Ligne, 0);
                JPanel Panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                Panel.add(Label);
                tab.add(Panel);
            }
        }
    Object[] panels = tab.toArray();
    listeContacts.setListData(panels);
        
    }

    public void recoitMessage(String participant, String body) {

        String messages = discussions.get(participant);
        messages = messages + "\n"+ participant + " : " + body;
        discussions.replace(participant, messages);
        if (participant.equals(contact)){
            textPaneMessages.setText(messages);
        }
    }
}
